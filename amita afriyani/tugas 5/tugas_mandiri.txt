1. apa konsep single inheritence, dan bagaimana implemetasi pythonnya dan kapan digunakan single inheritence.
Single inheritance adalah konsep dalam pemrograman berorientasi objek di mana sebuah kelas mewarisi properti dan 
metode dari satu kelas induk saja. Dalam model ini, subclass hanya memiliki satu superclass, memungkinkan pewarisan yang sederhana
dan lebih mudah diikuti dibandingkan dengan multiple inheritance (di mana sebuah kelas mewarisi dari lebih dari satu superclass).

* Beriukut contoh Implementasi Single Inheritance di Python


# Kelas induk
class Hewan:
    def __init__(self, nama):
        self.nama = nama

    def bergerak(self):
        print(f"{self.nama} sedang bergerak")

# Kelas turunan
class Kucing(Hewan):
    def bersuara(self):
        print(f"{self.nama} mengeong")

# Contoh penggunaan
kucing1 = Kucing("Tom")
kucing1.bergerak()   
kucing1.bersuara()   

Kapan Single Inheritance Digunakan, Single inheritance digunakan ketika

1.Desain sederhana
Struktur kelas hanya perlu mengambil properti dan metode dari satu kelas induk.
2.Keterbacaan kode
Lebih mudah untuk memahami hierarki sederhana dan menjaga kode tetap bersih.
3.Pemeliharaan mudah
Perubahan pada superclass tidak akan memiliki dampak kompleks pada subclass, seperti yang mungkin terjadi pada multiple inheritance.


2.apa konsep dari super untuk mewarisi di konstruktor, apa manfaatnya, dan gimn konsepnya, lalu implementasinya bagaimana, kapan dan mengapa menggunakan super.
    super() adalah fungsi bawaan Python yang digunakan untuk memanggil metode dari superclass (kelas induk) dalam kelas turunan.
Dengan super(), kita dapat mengakses konstruktor atau metode lain dari kelas induk tanpa harus menyebutkan nama kelas induk secara eksplisit. Ini berguna terutama
dalam hierarki pewarisan untuk memastikan bahwa inisialisasi dan metode dalam kelas induk dipanggil dengan benar.

*Manfaat super():
1.Pewarisan Kode
Memungkinkan subclass untuk mewarisi dan memperluas perilaku dari superclass tanpa menulis ulang kode.
2.Kompatibilitas dengan Multiple Inheritance
Dalam kasus multiple inheritance, super() membantu memanggil metode di superclass dalam urutan pewarisan yang sesuai (method resolution order, MRO).
3.Pemeliharaan Kode
Menghindari penulisan nama kelas induk secara eksplisit membuat kode lebih fleksibel dan mudah diubah jika struktur kelas diubah.

Konsep super() dalam Konstruktor
Ketika subclass memanggil super().__init__(), ini memastikan bahwa konstruktor dari kelas induk dipanggil 
dan semua inisialisasi di kelas induk dilakukan sebelum inisialisasi spesifik di subclass.

Berikut contoh implementasi super() di Python

# Kelas induk
class Hewan:
    def __init__(self, nama):
        self.nama = nama
        print(f"{self.nama} adalah hewan.")

# Kelas turunan
class Kucing(Hewan):
    def __init__(self, nama, warna):
        super().__init__(nama)  # Memanggil konstruktor kelas induk
        self.warna = warna
        print(f"{self.nama} berwarna {self.warna}.")

# Contoh penggunaan
kucing1 = Kucing("Tom", "abu-abu")
# Output:
# Tom adalah hewan.
# Tom berwarna abu-abu.


Kapan dan Mengapa Menggunakan super():

*Kapan Digunakan super ()
-Saat Anda ingin memanggil konstruktor atau metode dari superclass untuk mewarisi inisialisasi atau perilaku.
-Ketika subclass perlu menambahkan inisialisasi tambahan tetapi tetap ingin mempertahankan proses inisialisasi dari superclass.

*Mengapa Digunakan super ()

-super() memastikan bahwa inisialisasi di kelas induk dijalankan tanpa harus menyebutkan nama kelas induk secara eksplisit.
-Membantu menjaga kompatibilitas dengan multiple inheritance karena memanggil metode sesuai dengan urutan pewarisan (MRO).

1. Single Inheritance
Mewarisi properti dan metode dari satu kelas induk ke satu kelas turunan.

-Kapan digunakan
Struktur pewarisan sederhana, kode yang mudah dipelihara.
class Hewan:
    def suara(self):
        print("Hewan bersuara")

class Kucing(Hewan):
    def bersuara(self):
        print("Kucing mengeong")

kucing1 = Kucing()
kucing1.suara()  
kucing1.bersuara()

2. Multiple Inheritance
Satu kelas turunan mewarisi dari lebih dari satu kelas induk.

-Kapan digunakan
Ketika kelas turunan membutuhkan fitur dari lebih dari satu kelas induk.

class ClassA:
    def method_a(self):
        print("Method from Class A")

class ClassB:
    def method_b(self):
        print("Method from Class B")

class DerivedClass(ClassA, ClassB):
    def method_derived(self):
        print("Method from Derived Class")
    
    def display_info(self):
        print("Nama: Amita")
        print("NIM: 2355201004")  # Ganti dengan NIM yang sesuai

obj = DerivedClass()
obj.method_derived()   
obj.display_info()     

 
3. Multilevel Inheritance
Kelas anak mewarisi sifat dari kelas induk, yang juga mewarisi dari kelas induknya sendiri.

*Kapan Digunakan
Ketika struktur hierarki memiliki lebih dari satu tingkat.

class GrandParent:
    def method_grandparent(self):
        print("Method from Grandparent Class")

class Parent(GrandParent):
    def method_parent(self):
        print("Method from Parent Class")

class Child(Parent):
    def method_child(self):
        print("Method from Child Class")

obj = Child()
obj.method_grandparent()  
obj.method_parent()       
obj.method_child()        

4. Hierarchical Inheritance
Beberapa kelas anak mewarisi dari satu kelas induk yang sama.
-Kapan Digunakan
Ketika Anda memiliki beberapa kelas dengan sifat dasar yang sama.

class Orang:
    def display(self):
        print("Ini adalah kelas Orang")

class Guru(Orang):
    def show(self):
        print("Ini adalah kelas Guru")

# Membuat objek dari kelas Guru
obj_guru = Guru()
obj_guru.display() 
obj_guru.show()     

5. Hybrid Inheritance
 Kombinasi dari dua atau lebih jenis inheritance.
Kapan Digunakan
Ketika hubungan antar kelas memerlukan struktur yang kompleks.

class MataKuliah:
    def method_matakuliah(self):
        print("Ini adalah kelas Mata Kuliah")

class Mahasiswa(MataKuliah):
    def method_mahasiswa(self):
        print("Ini adalah kelas Mahasiswa")

class MahasiswaLain(MataKuliah):
    def method_mahasiswa_lain(self):
        print("Ini adalah kelas Mahasiswa Lain")

class MahasiswaGabungan(Mahasiswa, MahasiswaLain):
    def method_gabungan(self):
        print("Ini adalah kelas Mahasiswa Gabungan")

# Membuat objek dari kelas MahasiswaGabungan
obj = MahasiswaGabungan()
obj.method_matakuliah()       
obj.method_mahasiswa()        
obj.method_mahasiswa_lain()   
obj.method_gabungan()        

Tabel Perbandingan Jenis Inheritance
Jenis Inheritance	    Deskripsi	                           Contoh Penggunaan	    	            
Single	            Satu kelas anak mewarisi                 Hubungan sederhana    
                    satu kelas induk.
Multiple            Satu kelas anak mewarisi dari           Ketika kelas perlu
                    lebih dari satu kelas induk.           sifat dari beberapa kelas
Multilevel          Kelas anak mewarisi dari kelas
                    induk yang juga memiliki induk          Struktur bertingkat

4.Override method (penulisan ulang), apa manfaatnya gmna implementasi codenya, kapan dan mengapa digunakan.
Override Method (Penulisan Ulang Metode) adalah fitur dalam pemrograman berorientasi objek yang memungkinkan subclass (kelas anak) untuk 
menyediakan implementasi yang spesifik untuk metode yang sudah ada di superclass (kelas induk).

*Manfaat Override Method:
Kustomisasi Perilaku
Mengizinkan subclass untuk menyesuaikan dan mengubah cara metode yang diwarisi dari superclass bekerja.
Polimorfisme
Memungkinkan penggunaan objek dari subclass yang berbeda secara transparan saat memanggil metode yang sama. Ini sangat penting dalam desain yang berbasis antarmuka dan abstraksi.
Mengurangi Duplikasi Kode
Dengan mengoverride metode, Anda bisa menggunakan logika yang ada dan hanya memodifikasi bagian tertentu tanpa harus menulis ulang kode dari awal.

*Kapan dan Mengapa Digunakan
Kapan
Override digunakan ketika Anda memiliki metode di superclass yang tidak memenuhi kebutuhan spesifik subclass dan perlu disesuaikan.
Mengapa 
Override berguna untuk mengimplementasikan perilaku yang lebih spesifik, terutama dalam hierarki kelas yang kompleks, untuk memastikan bahwa objek dari subclass berfungsi sesuai harapan dalam konteks yang lebih besar.

class Animal:
    def sound(self):
        print("Animal makes a sound")

class Dog(Animal):
    def sound(self):  # Override method
        print("Dog barks")

class Cat(Animal):
    def sound(self):  # Override method
        print("Cat meows")

# Membuat objek dari kelas Dog dan Cat
animal = Animal()
dog = Dog()
cat = Cat()

# Memanggil metode sound
animal.sound()  
dog.sound()     
cat.sound() 


5.Kapan menggunakan pewarisan
Pewarisan (inheritance) dalam pemrograman berorientasi objek (OOP) adalah salah satu konsep kunci yang memungkinkan satu kelas untuk mewarisi atribut dan metode dari kelas lain. 
1. Membangun Hierarki Kelas
Kapan: Ketika Anda memiliki sekumpulan objek yang memiliki karakteristik dan perilaku yang sama, tetapi juga memiliki beberapa perbedaan.
2. Merepresentasikan Hubungan "Adalah" (Is-a Relationship)
Kapan: Ketika ada hubungan yang jelas antara kelas induk dan kelas anak, di mana kelas anak adalah jenis dari kelas induk.
3. Mengurangi Duplikasi Kode
Kapan: Ketika ada metode atau atribut yang sama di beberapa kelas.
4. Polimorfisme
Kapan: Ketika Anda ingin menggunakan objek dari berbagai kelas turunan yang memiliki metode yang sama tetapi dengan implementasi yang berbeda.
5. Peningkatan Keterbacaan dan Pemeliharaan Kode
Kapan: Ketika Anda ingin membuat struktur kode yang lebih jelas dan terorganisir.
6. Extensibility (Kemudahan Pengembangan)
Kapan: Ketika Anda merencanakan pengembangan di masa depan dan ingin menambahkan fitur baru tanpa mengubah kode yang ada.

6. Kapan menggunakan non pewarisan (komposisi)
Komposisi adalah konsep dalam pemrograman berorientasi objek (OOP) yang memungkinkan Anda untuk membangun kelas dengan
menggunakan objek dari kelas lain sebagai bagian dari implementasi kelas tersebut.
1. Menghindari Masalah Pewarisan yang Dalam
Kapan: Ketika Anda memiliki hierarki kelas yang kompleks dengan banyak tingkat pewarisan.
Mengapa: Pewarisan yang dalam bisa membuat kode menjadi sulit dipahami dan dipelihara. Dengan menggunakan komposisi, 
Anda dapat menghindari masalah ini dan membuat struktur kode yang lebih sederhana dan jelas.

2. Memfasilitasi Perubahan di Masa Depan
Kapan: Ketika Anda perlu membangun sistem yang mudah diubah atau diperluas di masa depan.
Mengapa: Komposisi memberikan fleksibilitas yang lebih besar karena Anda dapat mengubah atau mengganti komponen tanpa harus memodifikasi hierarki kelas yang ada. 
Ini memungkinkan Anda untuk menambahkan fitur baru tanpa mengganggu kode yang sudah ada.

3. Merepresentasikan Hubungan "Memiliki" (Has-a Relationship)
Kapan: Ketika hubungan antar objek lebih tepat dijelaskan sebagai "memiliki" daripada "adalah".
Contoh: Sebuah Mobil dapat memiliki Mesin, sehingga Anda lebih baik menggunakan komposisi untuk
menunjukkan bahwa Mobil terdiri dari Mesin daripada mewarisi dari kelas Mesin.

4. Mengurangi Ketergantungan
Kapan: Ketika Anda ingin mengurangi ketergantungan antara kelas.
Mengapa: Dengan komposisi, Anda bisa menggunakan objek dari kelas lain tanpa terikat pada hierarki kelas tertentu. 
Ini meningkatkan modularitas dan memungkinkan pengembangan yang lebih mudah.

5. Mendukung Polimorfisme Tanpa Pewarisan
Kapan: Ketika Anda ingin menggunakan polimorfisme tanpa membuat hierarki kelas yang rumit.
Mengapa: Anda bisa mencapai perilaku yang sama dengan menggunakan antarmuka (interfaces) dan komposisi, 
memungkinkan objek dari kelas yang berbeda berinteraksi secara fleksibel.


7. Buat studi kasusu cerita dan buat codenya sendiri
Di sebuah kota kecil, terdapat sebuah perpustakaan yang dikenal sebagai "Perpustakaan Pintar." Perpustakaan ini menyediakan berbagai jenis buku untuk anak-anak, remaja, dan dewasa. 
Setiap tahun, perpustakaan ini mengadakan program membaca untuk mendorong masyarakat membaca lebih banyak buku. Namun, 
dengan jumlah buku yang semakin bertambah dan pengguna yang aktif, manajemen perpustakaan merasa perlu untuk mengembangkan sistem manajemen yang lebih efisien.

Karakter Utama
Amita: Seorang mahasiswi yang sangat menyukai buku, terutama tentang teknologi dan pengembangan perangkat lunak. 
Dia sering mengunjungi perpustakaan untuk meminjam buku dan mengikuti seminar.

Budi: Petugas perpustakaan yang ramah dan selalu siap membantu pengunjung. 
Budi bertanggung jawab untuk mencatat peminjaman dan pengembalian buku serta memberikan rekomendasi buku kepada pengguna.

Ibu Sari: Kepala perpustakaan yang ingin meningkatkan pemanfaatan koleksi buku. 
Dia percaya bahwa dengan sistem yang lebih baik, lebih banyak orang akan tertarik untuk membaca.

-Masalah yang Dihadapi
Dengan semakin banyaknya buku dan pengunjung, seringkali pengguna merasa kesulitan untuk mencari buku yang mereka inginkan dan mencatat buku yang sudah mereka pinjam. 
Budi dan Ibu Sari ingin menciptakan sistem yang tidak hanya memudahkan pengunjung dalam meminjam dan mengembalikan buku, tetapi juga memberikan informasi tentang buku yang dipinjam oleh setiap pengguna.

-Solusi yang Diterapkan
Ibu Sari memutuskan untuk mengembangkan sistem manajemen perpustakaan menggunakan konsep pemrograman berorientasi objek (OOP). 
Dia ingin menggunakan komposisi untuk merancang sistem di mana setiap pengguna dapat meminjam beberapa buku dan sistem dapat melacak buku yang sedang dipinjam.

class Buku:
    def __init__(self, judul, pengarang):
        self.judul = judul
        self.pengarang = pengarang
        self.is_dipinjam = False
    
    def pinjam(self):
        if not self.is_dipinjam:
            self.is_dipinjam = True
            return f"Buku '{self.judul}' telah dipinjam."
        return f"Buku '{self.judul}' sudah dipinjam."

    def kembalikan(self):
        if self.is_dipinjam:
            self.is_dipinjam = False
            return f"Buku '{self.judul}' telah dikembalikan."
        return f"Buku '{self.judul}' tidak sedang dipinjam."


class Pengguna:
    def __init__(self, nama):
        self.nama = nama
        self.buku_dipinjam = []

    def pinjam_buku(self, buku):
        result = buku.pinjam()
        if buku.is_dipinjam:
            self.buku_dipinjam.append(buku)
        return result

    def kembalikan_buku(self, buku):
        result = buku.kembalikan()
        if not buku.is_dipinjam:
            self.buku_dipinjam.remove(buku)
        return result

    def daftar_buku_dipinjam(self):
        if self.buku_dipinjam:
            return f"Daftar buku yang dipinjam oleh {self.nama}: " + ", ".join(buku.judul for buku in self.buku_dipinjam)
        return f"{self.nama} tidak meminjam buku apapun."


# Contoh penggunaan
if __name__ == "__main__":
    # Membuat beberapa objek buku
    buku1 = Buku("Belajar Python", "John Doe")
    buku2 = Buku("Data Structures and Algorithms", "Jane Smith")
    
    # Membuat objek pengguna
    pengguna1 = Pengguna("Amita")
    
    # Amita meminjam buku
    print(pengguna1.pinjam_buku(buku1))
    print(pengguna1.pinjam_buku(buku2))

    # Menampilkan daftar buku yang dipinjam
    print(pengguna1.daftar_buku_dipinjam())

    # Mengembalikan satu buku
    print(pengguna1.kembalikan_buku(buku1))

    # Menampilkan daftar buku yang dipinjam setelah pengembalian
    print(pengguna1.daftar_buku_dipinjam())

    # Amita mencoba meminjam buku yang sudah dipinjam
    print(pengguna1.pinjam_buku(buku1))


