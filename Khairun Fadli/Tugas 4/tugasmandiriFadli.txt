                                            OOP
1. Konsep OOP (Object-Oriented Programming)
OOP adalah paradigma pemrograman yang menggunakan **objek** untuk memodelkan dunia nyata. Fokusnya adalah pada **membungkus data (atribut)** dan **perilaku (method)** dalam suatu unit bernama **kelas**. Empat prinsip utama OOP:  
1. **Encapsulation (Enkapsulasi):** Data dan fungsi dibungkus dalam satu kelas untuk membatasi akses langsung ke data. Akses hanya melalui method tertentu.  
2. **Inheritance (Pewarisan):** Sebuah class bisa mewarisi atribut dan method dari class lain, sehingga kode dapat digunakan kembali.  
3. **Polymorphism (Polimorfisme):** Kemampuan method dengan nama yang sama berperilaku berbeda tergantung pada objek atau class yang memanggilnya.  
4. **Abstraction (Abstraksi):** Menyembunyikan detail kompleks dan hanya menampilkan fitur penting kepada pengguna.  

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                            CLASS
2. Class 
**Class** adalah template atau blueprint untuk membuat objek. Semua objek dari suatu class memiliki struktur yang sama, tetapi bisa memiliki nilai atribut berbeda. Di dalam class terdapat:
- **Atribut**: Variabel yang menyimpan data.
- **Method**: Fungsi yang menggambarkan perilaku objek.

Contoh Class:  
```python
class Mobil:
    def __init__(self, merk, warna):  # Constructor
        self.merk = merk              # Atribut
        self.warna = warna            # Atribut

    def start(self):  # Method
        print(f"{self.merk} berwarna {self.warna} sedang menyala.")

    def stop(self):  # Method
        print(f"{self.merk} telah dimatikan.")
```

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                            OBJECT
3. Object 
**Object** adalah instansiasi atau hasil konkret dari class. Setiap object memiliki salinan atribut yang bisa diubah secara independen. **Satu class dapat menghasilkan banyak objek**.  

Contoh Pembuatan Objek:  
```python
# Membuat dua objek dari class Mobil
mobil1 = Mobil("Toyota", "Merah")  
mobil2 = Mobil("Honda", "Biru")

# Memanggil method start dan stop dari kedua objek
mobil1.start()  # Output: Toyota berwarna Merah sedang menyala.
mobil2.start()  # Output: Honda berwarna Biru sedang menyala.
```

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                            ATRIBUT
4. Atribut 
Atribut adalah **data atau properti** yang dimiliki oleh objek. Atribut ini bisa berupa variabel sederhana seperti angka dan string, atau bisa juga lebih kompleks seperti daftar dan objek lainnya.  

Jenis Atribut:  
1. **Atribut Instance:** Atribut yang khusus dimiliki oleh setiap objek (ditentukan dalam `__init__()`).
2. **Atribut Class:** Atribut yang dimiliki bersama oleh semua objek dari class (ditentukan langsung di dalam class).

#### Contoh Atribut:
```python
class Kucing:
    # Atribut class (bersifat umum untuk semua objek)
    jenis_hewan = "Mamalia"

    def __init__(self, nama, usia):
        # Atribut instance (bersifat unik untuk setiap objek)
        self.nama = nama
        self.usia = usia

kucing1 = Kucing("Milo", 2)
kucing2 = Kucing("Luna", 3)

# Mengakses atribut
print(kucing1.nama)  # Output: Milo
print(kucing2.nama)  # Output: Luna
print(Kucing.jenis_hewan)  # Output: Mamalia
```

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                            METHOD
5. Method 
Method adalah **fungsi yang didefinisikan di dalam class**. Method ini menggambarkan perilaku atau aksi yang dapat dilakukan oleh objek dari class tersebut. Ada beberapa jenis method:  

1. **Instance Method:** Method yang bekerja pada objek tertentu dan biasanya membutuhkan `self`.
2. **Class Method:** Method yang bekerja pada class dan menerima parameter `cls`.
3. **Static Method:** Method independen yang tidak bergantung pada atribut instance maupun class.

Contoh Berbagai Jenis Method:  
```python
class Lingkaran:
    pi = 3.14  # Atribut class

    def __init__(self, radius):
        self.radius = radius  # Atribut instance

    # Instance method
    def luas(self):
        return Lingkaran.pi * (self.radius ** 2)

    # Class method
    @classmethod
    def set_pi(cls, nilai_baru):
        cls.pi = nilai_baru

    # Static method
    @staticmethod
    def info():
        print("Ini adalah class untuk menghitung luas lingkaran.")

# Membuat objek lingkaran dengan radius 5
lingkaran1 = Lingkaran(5)

# Memanggil method instance
print(lingkaran1.luas())  # Output: 78.5

# Memanggil class method untuk mengubah nilai pi
Lingkaran.set_pi(3.14159)

# Memanggil method instance lagi setelah perubahan nilai pi
print(lingkaran1.luas())  # Output: 78.53975

# Memanggil static method
Lingkaran.info()  # Output: Ini adalah class untuk menghitung luas lingkaran.
```

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                            ENCAPSULATION
6. Encapsulation (Enkapsulasi)
Enkapsulasi bertujuan untuk **menyembunyikan data sensitif** agar tidak bisa diakses langsung dari luar class. Ini dilakukan dengan menggunakan atribut atau method privat (diawali dengan `__`).

Contoh Enkapsulasi:
```python
class RekeningBank:
    def __init__(self, nama, saldo):
        self.nama = nama
        self.__saldo = saldo  # Atribut privat

    def lihat_saldo(self):
        print(f"Saldo {self.nama}: Rp{self.__saldo}")

    def setor(self, jumlah):
        self.__saldo += jumlah
        print(f"Rp{jumlah} telah disetor.")

# Membuat objek rekening
rekening = RekeningBank("Andi", 500000)

# Mengakses saldo melalui method
rekening.lihat_saldo()  # Output: Saldo Andi: Rp500000

# Menyetor uang
rekening.setor(200000)  # Output: Rp200000 telah disetor.

# Tidak bisa mengakses saldo langsung karena atribut privat
# print(rekening.__saldo)  # Error
```

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                            INHERITANCE
7. Inheritance (Pewarisan)
Inheritance memungkinkan sebuah class **mewarisi atribut dan method dari class lain**. Dengan ini, kita bisa membuat class baru tanpa menulis ulang kode yang sama.  

Contoh Inheritance:
```python
class Hewan:
    def __init__(self, nama):
        self.nama = nama

    def bergerak(self):
        print(f"{self.nama} sedang bergerak.")

class Kucing(Hewan):  # Kucing mewarisi class Hewan
    def suara(self):
        print(f"{self.nama} mengeong.")

# Membuat objek Kucing
kucing1 = Kucing("Milo")
kucing1.bergerak()  # Output: Milo sedang bergerak.
kucing1.suara()     # Output: Milo mengeong.
```

---------------------------------------------------------------------------------------------------------------------------------

                                            POLYMORPHISM
8. Polymorphism (Polimorfisme)
Polimorfisme memungkinkan objek dari class yang berbeda **menggunakan method dengan nama yang sama, tetapi berperilaku berbeda**.  

Contoh Polimorfisme:
```python
class Anjing:
    def suara(self):
        print("Guk guk!")

class Kucing:
    def suara(self):
        print("Meong!")

# Polimorfisme dalam action
def hewan_bersuara(hewan):
    hewan.suara()

anjing = Anjing()
kucing = Kucing()

hewan_bersuara(anjing)  # Output: Guk guk!
hewan_bersuara(kucing)  # Output: Meong!
```

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                            KESIMPULAN
9. Kesimpulan  
OOP sangat berguna untuk memodelkan program yang kompleks dengan cara yang modular dan mudah dipahami. Konsep **class, object, atribut, dan method** adalah dasar dari OOP, dan fitur tambahan seperti **inheritance**, **polymorphism**, dan **encapsulation** memungkinkan kode lebih fleksibel dan terstruktur.  

Dengan pemahaman ini, Anda bisa mulai membuat program dengan struktur OOP yang lebih baik dan mudah dikembangkan!